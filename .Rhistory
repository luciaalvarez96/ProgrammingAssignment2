## In this assignment we'll write a pair of functions that cache the inverse of a matrix
## (assuming that the matrix supplied is always invertible)
## i.e. makeCacheMatrix and cacheSolve
## The function makeCacheMatrix will be used to create a special "matrix" object that can
## cache its inverse.
makeCacheMatrix <- function(a = matrix()) {
invmat <- NULL
setm <- function(b) {
a <<- b
invmat <<- NULL
}
getm <- function() a
setinv <- function(inverse) invmat <<- inverse
getinv <- function() invmat
list(setm = setm , getm = getm,
setinv = setinv,
getinv = getinv)
}
## The function cacheSolve computes the inverse of the special "matrix" returned by the
## previous function. If the inverse has already been calculated (and the matrix has not
## changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(a, ...) {
## Return a matrix that is the inverse of 'x'
invmat <- a$getinv()
if (!is.null(invmat)) {
message("getting cached data")
return(invmat)
}
datamat <- a$getm()
invmat <- solve(datamat, ...)
a$setinv(invmat)
invmat
}
invmat <- matrix(c(1,1,0,1,0,1,0,1,0),3,3)
invmat1 <- makeCacheMatrix(invmat)
invmat1
2+2
cacheSolve(invmat1)
## In this assignment we'll write a pair of functions that cache the inverse of a matrix
## (assuming that the matrix supplied is always invertible)
## i.e. makeCacheMatrix and cacheSolve
## The function makeCacheMatrix will be used to create a special "matrix" object that can
## cache its inverse.
makeCacheMatrix <- function(a = matrix()) {
mat <- NULL
setm <- function(b) {
a <<- b
mat <<- NULL
}
getm <- function() a
setinv <- function(inverse) mat <<- inverse
getinv <- function() mat
list(setm = setm , getm = getm,
setinv = setinv,
getinv = getinv)
}
## The function cacheSolve computes the inverse of the special "matrix" returned by the
## previous function. If the inverse has already been calculated (and the matrix has not
## changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(a, ...) {
## Return a matrix that is the inverse of 'x'
mat <- a$getinv()
if (!is.null(mat)) {
message("getting cached data")
return(mat)
}
datamat <- a$getm()
mat <- solve(datamat, ...)
a$setinv(mat)
mat
}
mat <- matrix(c(1,0,2,-1,1,0,0,0,1),3,3)
mat1 <- makeCacheMatrix(mat)
cacheSolve(mat1)
mat <- matrix(c(2,1,3,0,1,7,1,-4,-3),3,3)
cacheSolve(mat)
mat1 <- makeCacheMatrix(mat)
cacheSolve(mat1)
## In this assignment we'll write a pair of functions that cache the inverse of a matrix
## (assuming that the matrix supplied is always invertible)
## i.e. makeCacheMatrix and cacheSolve
## The function makeCacheMatrix will be used to create a special "matrix" object that can
## cache its inverse.
makeCacheMatrix <- function(a = matrix()) {
mat <- NULL
setm <- function(b) {
a <<- b
mat <<- NULL
}
getm <- function() a
setinv <- function(inverse) mat <<- inverse
getinv <- function() mat
list(setm = setm , getm = getm,
setinv = setinv,
getinv = getinv)
}
## The function cacheSolve computes the inverse of the special "matrix" returned by the
## previous function. If the inverse has already been calculated (and the matrix has not
## changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(a, ...) {
## Return a matrix that is the inverse of 'x'
mat <- a$getinv()
if (!is.null(mat)) {
message("getting cached data")
return(mat)
}
datamat <- a$getm()
mat <- solve(datamat, ...)
a$setinv(mat)
mat
}
## Testing the code
## mat <- matrix(c(1,0,2,-1,1,0,0,0,1),3,3)
## mat1 <- makeCacheMatrix(mat)
## cacheSolve(mat1)
mat <- matrix(c(1,0,2,-1,1,0,0,0,1),3,3)
mat1 <- makeCacheMatrix(mat)
cacheSolve(mat1)
## In this assignment we'll write a pair of functions that cache the inverse of a matrix
## (assuming that the matrix supplied is always invertible)
## i.e. makeCacheMatrix and cacheSolve
## The function makeCacheMatrix will be used to create a special "matrix" object that can
## cache its inverse.
makeCacheMatrix <- function(a = matrix()) {
mymat <- NULL
setm <- function(b) {
a <<- b
mymat <<- NULL
}
getm <- function() a
setinv <- function(inverse) mymat <<- inverse
getinv <- function() mymat
list(setm = setm , getm = getm,
setinv = setinv,
getinv = getinv)
}
## The function cacheSolve computes the inverse of the special "matrix" returned by the
## previous function. If the inverse has already been calculated (and the matrix has not
## changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(a, ...) {
## Return a matrix that is the inverse of 'x'
mymat <- a$getinv()
if (!is.null(mymat)) {
message("getting cached data")
return(mymat)
}
datamat <- a$getm()
mymat <- solve(datamat, ...)
a$setinv(mymat)
mymat
}
## Testing the code
## mymat <- matrix(c(1,0,2,-1,1,0,0,0,1),3,3)
## mymat1 <- makeCacheMatrix(mymat)
## cacheSolve(mymat1)
mymat <- matrix(c(1,0,2,-1,1,0,0,0,1),3,3)
mymat1 <- makeCacheMatrix(mymat)
cacheSolve(mymat1)
## In this assignment we'll write a pair of functions that cache the inverse of a matrix
## (assuming that the matrix supplied is always invertible)
## i.e. makeCacheMatrix and cacheSolve
## The function makeCacheMatrix will be used to create a special "matrix" object that can
## cache its inverse.
makeCacheMatrix <- function(a = matrix()) {
mymat <- NULL
setm <- function(b) {
a <<- b
mymat <<- NULL
}
getm <- function() a
setinv <- function(inverse) mymat <<- inverse
getinv <- function() mymat
list(setm = setm , getm = getm,
setinv = setinv,
getinv = getinv)
}
## The function cacheSolve computes the inverse of the special "matrix" returned by the
## previous function. If the inverse has already been calculated (and the matrix has not
## changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(a, ...) {
## Return a matrix that is the inverse of 'x'
mymat <- a$getinv()
if (!is.null(mymat)) {
message("getting cached data")
return(mymat)
}
datamat <- a$getm()
mymat <- solve(datamat, ...)
a$setinv(mymat)
mymat
}
## Testing the code
## mymat <- matrix(c(1,0,2,-1,1,0,0,0,1),3,3)
## mymat1 <- makeCacheMatrix(mymat)
## cacheSolve(mymat1)
##
## mymat <- matrix(c(-4,1,5,1,1,-1,1,-3,-2))
## mymat1 <- makeCacheMatrix(mymat)
## cacheSolve(mymat1)
mymat <- matrix(c(-4,1,5,1,1,-1,1,-3,-2))
mymat1 <- makeCacheMatrix(mymat)
cacheSolve(mymat1)
mymat <- matrix(c(1,0,2,-1,1,0,0,0,1),3,3)
mymat1 <- makeCacheMatrix(mymat)
cacheSolve(mymat1)
mymat <- matrix(c(5,1,-1,5,3,-2,-1,0,0))
mymat1 <- makeCacheMatrix(mymat)
cacheSolve(mymat1)
mymat <- matrix(c(-5,-7,3,4))
mymat1 <- makeCacheMatrix(mymat)
cacheSolve(mymat1)
mymat <- matrix(c(4,9,1,4,8,0,1,2,2),3,3)
mymat1 <- makeCacheMatrix(mymat)
cacheSolve(mymat1)
mymat <- matrix(c(5,3,10,6),2,2)
mymat1 <- makeCacheMatrix(mymat)
cacheSolve(mymat1)
## In this assignment we'll write a pair of functions that cache the inverse of a matrix
## (assuming that the matrix supplied is always invertible)
## i.e. makeCacheMatrix and cacheSolve
## The function makeCacheMatrix will be used to create a special "matrix" object that can
## cache its inverse.
makeCacheMatrix <- function(a = matrix()) {
mymat <- NULL
setm <- function(b) {
a <<- b
mymat <<- NULL
}
getm <- function() a
setinv <- function(inverse) mymat <<- inverse
getinv <- function() mymat
list(setm = setm , getm = getm,
setinv = setinv,
getinv = getinv)
}
## The function cacheSolve computes the inverse of the special "matrix" returned by the
## previous function. If the inverse has already been calculated (and the matrix has not
## changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(a, ...) {
## Return a matrix that is the inverse of 'x'
mymat <- a$getinv()
if (!is.null(mymat)) {
message("getting cached data")
return(mymat)
}
datamat <- a$getm()
mymat <- solve(datamat, ...)
a$setinv(mymat)
mymat
}
## Testing the code
## mymat <- matrix(c(1,0,2,-1,1,0,0,0,1),3,3)
## mymat1 <- makeCacheMatrix(mymat)
## cacheSolve(mymat1)
##
## mymat <- matrix(c(5,3,10,6),2,2)
## mymat1 <- makeCacheMatrix(mymat)
## cacheSolve(mymat1)
## In this assignment we'll write a pair of functions that cache the inverse of a matrix
## (assuming that the matrix supplied is always invertible)
## i.e. makeCacheMatrix and cacheSolve
## The function makeCacheMatrix will be used to create a special "matrix" object that can
## cache its inverse.
makeCacheMatrix <- function(a = matrix()) {
mymat <- NULL
setm <- function(b) {
a <<- b
mymat <<- NULL
}
getm <- function() a
setinv <- function(inverse) mymat <<- inverse
getinv <- function() mymat
list(setm = setm , getm = getm,
setinv = setinv,
getinv = getinv)
}
## The function cacheSolve computes the inverse of the special "matrix" returned by the
## previous function. If the inverse has already been calculated (and the matrix has not
## changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(a, ...) {
## Return a matrix that is the inverse of 'x'
mymat <- a$getinv()
if (!is.null(mymat)) {
message("getting cached data")
return(mymat)
}
datamat <- a$getm()
mymat <- solve(datamat, ...)
a$setinv(mymat)
mymat
}
## Testing the code
## mymat <- matrix(c(1,0,2,-1,1,0,0,0,1),3,3)
## mymat1 <- makeCacheMatrix(mymat)
## cacheSolve(mymat1)
##
## mymat <- matrix(c(6,-3,5,2),2,2)
## mymat1 <- makeCacheMatrix(mymat)
## cacheSolve(mymat1)
mymat <- matrix(c(6,-3,5,2),2,2)
mymat1 <- makeCacheMatrix(mymat)
cacheSolve(mymat1)
## In this assignment we'll write a pair of functions that cache the inverse of a matrix
## (assuming that the matrix supplied is always invertible)
## i.e. makeCacheMatrix and cacheSolve
## The function makeCacheMatrix will be used to create a special "matrix" object that can
## cache its inverse.
makeCacheMatrix <- function(a = matrix()) {
mymat <- NULL
setm <- function(b) {
a <<- b
mymat <<- NULL
}
getm <- function() a
setinv <- function(inverse) mymat <<- inverse
getinv <- function() mymat
list(setm = setm , getm = getm,
setinv = setinv,
getinv = getinv)
}
## The function cacheSolve computes the inverse of the special "matrix" returned by the
## previous function. If the inverse has already been calculated (and the matrix has not
## changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(a, ...) {
## Return a matrix that is the inverse of 'x'
mymat <- a$getinv()
if (!is.null(mymat)) {
message("getting cached data")
return(mymat)
}
datamat <- a$getm()
mymat <- solve(datamat, ...)
a$setinv(mymat)
mymat
}
## Testing the code
## mymat <- matrix(c(1,0,2,-1,1,0,0,0,1),3,3)
## mymat1 <- makeCacheMatrix(mymat)
## cacheSolve(mymat1)
##
## mymat <- matrix(c(1,1,1,3,4,3,3,3,4),3,3)
## mymat1 <- makeCacheMatrix(mymat)
## cacheSolve(mymat1)
mymat <- matrix(c(1,1,1,3,4,3,3,3,4),3,3)
mymat1 <- makeCacheMatrix(mymat)
cacheSolve(mymat1)
